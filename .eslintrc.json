{
  "env": {
    "browser": true,
    "es2021": true,
    "es6": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:prettier/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended"
  ],
  "parserOptions": {
    "ecmaVersion": 12,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "plugins": [
    "react",
    "react-hooks"
  ],
  "rules": {
    "arrow-body-style": [
      "warn",
      "as-needed"
    ],
    "brace-style": [
      "error",
      "1tbs"
    ],
    "camelcase": [
      "error",
      {
        "properties": "always"
      }
    ],
    "comma-dangle": [
      "error",
      {
        "arrays": "always-multiline",
        "objects": "always-multiline",
        "imports": "always-multiline",
        "exports": "always-multiline",
        "functions": "never"
      }
    ],
    "comma-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "curly": [
      "error",
      "multi-line"
    ],
    "default-case": "error",
    "func-call-spacing": [
      "error",
      "never"
    ],
    "id-length": [
      2,
      {
        "exceptions": [
          "t",
          "m",
          "p",
          "_"
        ]
      }
    ],
    "jsx-quotes": [
      "error",
      "prefer-double"
    ],
    "keyword-spacing": [
      "error",
      {
        "before": true,
        "after": true,
        "overrides": {
          "if": {
            "after": true
          },
          "else": {
            "after": true
          },
          "import": {
            "after": true
          },
          "from": {
            "after": true
          }
        }
      }
    ],
    "max-len": [
      "error",
      {
        "code": 160,
        "ignoreComments": true,
        "ignoreRegExpLiterals": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreUrls": true
      }
    ],
    "max-statements": [
      "warn",
      20
    ],
    "new-cap": [
      "error",
      {
        "capIsNew": false
      }
    ],
    "newline-after-var": [
      "error",
      "always"
    ],
    "no-cond-assign": [
      "error",
      "always"
    ],
    "no-else-return": "error",
    "no-extra-semi": "off",
    "no-irregular-whitespace": "error",
    "no-multi-spaces": "error",
    "no-nested-ternary": "error",
    "no-param-reassign": [
      "error",
      {
        "ignorePropertyModificationsFor": [
          "el",
          "ref",
          "event"
        ]
      }
    ],
    "no-trailing-spaces": "error",
    "no-unused-vars": "off",
    "no-whitespace-before-property": "off",
    "object-shorthand": [
      "error",
      "always"
    ],
    "object-curly-spacing": [
      "error",
      "always"
    ],
    "padding-line-between-statements": [
      "error",
      // Always require blank lines after directive (like 'use-strict'), except between directives
      {
        "blankLine": "always",
        "prev": "directive",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "directive",
        "next": "directive"
      },
      // Always require blank lines after import, except between imports
      {
        "blankLine": "always",
        "prev": "import",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "import",
        "next": "import"
      },
      // Always require blank lines before and after every sequence of variable declarations and export
      {
        "blankLine": "always",
        "prev": "*",
        "next": [
          "const",
          "let",
          "var",
          "export"
        ]
      },
      {
        "blankLine": "always",
        "prev": [
          "const",
          "let",
          "var",
          "export"
        ],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": [
          "const",
          "let",
          "var",
          "export"
        ],
        "next": [
          "const",
          "let",
          "var",
          "export"
        ]
      },
      // Always require blank lines before and after class declaration, if, do/while, switch, try
      {
        "blankLine": "always",
        "prev": "*",
        "next": [
          "if",
          "class",
          "for",
          "do",
          "while",
          "switch",
          "try"
        ]
      },
      {
        "blankLine": "always",
        "prev": [
          "if",
          "class",
          "for",
          "do",
          "while",
          "switch",
          "try"
        ],
        "next": "*"
      },
      // Always require blank lines before return statements
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      }
    ],
    "prefer-template": "error",
    "prettier/prettier": "error",
    "quotes": [
      "error",
      "single",
      {
        "avoidEscape": true
      }
    ],
    "react/destructuring-assignment": [
      "error",
      "always"
    ],
    "react/display-name": "off",
    "react/jsx-boolean-value": [
      "error",
      "never"
    ],
    "react/jsx-first-prop-new-line": [
      "error",
      "multiline"
    ],
    "react/jsx-fragments": [
      "error",
      "syntax"
    ],
    "react/jsx-indent-props": [
      "error",
      2
    ],
    "react/jsx-wrap-multilines": "error",
    "react/no-string-refs": "error",
    "react/no-unknown-property": [
      "error",
      {
        "ignore": [
          "css"
        ]
      }
    ],
    "react/react-in-jsx-scope": "off",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "never",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "space-in-parens": [
      "error",
      "never"
    ],
    "space-infix-ops": "error",
    "sort-imports": [
      "error",
      {
        "ignoreCase": true,
        "ignoreDeclarationSort": true,
        "ignoreMemberSort": false,
        "memberSyntaxSortOrder": [
          "none",
          "all",
          "multiple",
          "single"
        ]
      }
    ],
    "sort-keys": [
      "warn",
      "asc",
      {
        "natural": true
      }
    ]
  }
}